syntax = "proto3";

package hbf.v1.sgroups;
option go_package = "github.com/H-BF/protos/pkg/api/sgroups;sgroups";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "common/ip-transport.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Security groups API";
    version: "1.0";
    contact: {
      name: "E";
      url: "https://blog.bullgare.com/2020/07/complete-list-of-swagger-options-to-protobuf-file/";
    };
  };
  schemes: [HTTP];
  consumes: "application/json";
  produces: "application/json";
};

//ip network
message Network {
  string name = 1;
  common.Networks.NetIP network = 2;
}

//security group
message SecGroup {
  string name = 1;
  repeated Network networks = 2;
}

//security group rule
message Rule {
  //security group at client
  SecGroup sg_from = 1;
  //security group at server
  SecGroup sg_to = 2;
  //IP net transport
  common.Networks.NetIP.Transport transport = 3;
  //port range(s) from
  repeated common.Networks.NetIP.PortRange ports_from = 4;
  //port range(s) to
  repeated common.Networks.NetIP.PortRange ports_to = 5;
}

message SyncStatusResp {
  //db sate changes its value after each successful Sync op
  string db_state = 1;
}

//Synchronize security group Rules
message SyncSGRules{
  repeated Rule rules = 1;
}

//Synchronize Security Groups
message SyncSecurityGroups{
  repeated SecGroup groups = 1;
}

//Synchronize networks
message SyncNetworks{
  repeated Network networks = 1;
}

message ListNetworksReq {}

//ListNetworksResp networks list
message ListNetworksResp {
  repeated Network networks = 1;
}

message ListSecurityGroupsReq{}

//ListSecurityGroupsResp Security Groups lists
message ListSecurityGroupsResp{
  repeated SecGroup groups = 1;
}

//Synchronize data
message SyncReq {
  enum SyncOp {
    //full synchronize operation
    FullSync = 0;
    //just Insert/Update passed items
    Upsert = 1;
    //just Delete passed items
    Delete = 2;
  }
  SyncOp sync_op = 1;
  oneof subject {
      SyncSGRules sg_rules = 2;
      SyncSecurityGroups groups = 3;
      SyncNetworks networks = 4;
  }
}

message GetSgSubnetsReq {
  string sg_name = 1;
}

message GetSgSubnetsResp {
  repeated Network networks = 1;
}

message GetRulesReq {
  string sg_from = 1;
  string sg_to = 2;
}

message FindRulesReq {
  repeated string sg_from = 1;
  repeated string sg_to = 2;
}

message RulesResp {
  repeated Rule rules = 1;
}

message GetSecGroupForAddressReq{
  //an IP or IP/subnet address
  string address = 1;
}

//security groups and its rules service
service SecGroupService {
   //synchronize security rules
   rpc Sync(SyncReq) returns (google.protobuf.Empty) {
     option (google.api.http) = {
       post: "/v1/sync"
       body: "*"
     };
   }

   //gets status after sync operation
   rpc SyncStatus(google.protobuf.Empty) returns(SyncStatusResp){
     option (google.api.http) = {
       get: "/v1/sync/status"
     };
   }

   //lists networks
   rpc ListNetworks(ListNetworksReq) returns (ListNetworksResp) {
     option (google.api.http) = {
       post: "/v1/list/networks"
       body: "*"
     };
   }

   //lists security groups
   rpc ListSecurityGroups(ListSecurityGroupsReq) returns (ListSecurityGroupsResp) {
     option (google.api.http) = {
       post: "/v1/list/security-groups"
       body: "*"
     };
   }

   //get subnet(s) for SG
   rpc GetSgSubnets(GetSgSubnetsReq) returns (GetSgSubnetsResp){
     option (google.api.http) = {
       get: "/v1/sg/{sg_name}/subnets"
     };
   };

   //find security rules for direction SG --> SG
   rpc GetRules(GetRulesReq) returns (RulesResp) {
     option (google.api.http) = {
       get: "/v1/sg-from/{sg_from}/to/{sg_to}/rules"
     };
   };

   //find security rules scoped by security groups
   rpc FindRules(FindRulesReq) returns (RulesResp) {
     option (google.api.http) = {
       post: "/v1/rules"
       body: "*"
     };
   };

   //get security group for address
   rpc GetSecGroupForAddress(GetSecGroupForAddressReq) returns (SecGroup) {
     option (google.api.http) = {
       get: "/v1/{address}/sg"
     };
   };
}