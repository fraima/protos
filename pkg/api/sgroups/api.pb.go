// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: sgroups/api.proto

package sgroups

import (
	common "github.com/H-BF/protos/pkg/api/common"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//SyncOp: sync operation
type SyncReq_SyncOp int32

const (
	//FullSync: Delete+Insert+Update operations (default)
	SyncReq_FullSync SyncReq_SyncOp = 0
	//Upsert: Insert+Update operations
	SyncReq_Upsert SyncReq_SyncOp = 1
	//Delete: Delete operation
	SyncReq_Delete SyncReq_SyncOp = 2
)

// Enum value maps for SyncReq_SyncOp.
var (
	SyncReq_SyncOp_name = map[int32]string{
		0: "FullSync",
		1: "Upsert",
		2: "Delete",
	}
	SyncReq_SyncOp_value = map[string]int32{
		"FullSync": 0,
		"Upsert":   1,
		"Delete":   2,
	}
)

func (x SyncReq_SyncOp) Enum() *SyncReq_SyncOp {
	p := new(SyncReq_SyncOp)
	*p = x
	return p
}

func (x SyncReq_SyncOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncReq_SyncOp) Descriptor() protoreflect.EnumDescriptor {
	return file_sgroups_api_proto_enumTypes[0].Descriptor()
}

func (SyncReq_SyncOp) Type() protoreflect.EnumType {
	return &file_sgroups_api_proto_enumTypes[0]
}

func (x SyncReq_SyncOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncReq_SyncOp.Descriptor instead.
func (SyncReq_SyncOp) EnumDescriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{11, 0}
}

//Network: represents a named IP network
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//the name of network
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//network in CIDR form
	Network *common.Networks_NetIP `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{0}
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetNetwork() *common.Networks_NetIP {
	if x != nil {
		return x.Network
	}
	return nil
}

//SecGroup: represents a security group
type SecGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//name of security group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//related to security gpoup network(s)
	Networks []string `protobuf:"bytes,2,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *SecGroup) Reset() {
	*x = SecGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecGroup) ProtoMessage() {}

func (x *SecGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecGroup.ProtoReflect.Descriptor instead.
func (*SecGroup) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{1}
}

func (x *SecGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecGroup) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

//Rule: represents Security Groups Rule
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//security group at client
	SgFrom string `protobuf:"bytes,1,opt,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	//security group at server
	SgTo string `protobuf:"bytes,2,opt,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
	//ip net transport
	Transport common.Networks_NetIP_Transport `protobuf:"varint,3,opt,name=transport,proto3,enum=common.Networks_NetIP_Transport" json:"transport,omitempty"`
	//access ports set
	Ports []*Rule_Ports `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{2}
}

func (x *Rule) GetSgFrom() string {
	if x != nil {
		return x.SgFrom
	}
	return ""
}

func (x *Rule) GetSgTo() string {
	if x != nil {
		return x.SgTo
	}
	return ""
}

func (x *Rule) GetTransport() common.Networks_NetIP_Transport {
	if x != nil {
		return x.Transport
	}
	return common.Networks_NetIP_Transport(0)
}

func (x *Rule) GetPorts() []*Rule_Ports {
	if x != nil {
		return x.Ports
	}
	return nil
}

//SyncStatusResp: db status after last succeeded Sync
type SyncStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//last succeeded updated DB timestamp
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SyncStatusResp) Reset() {
	*x = SyncStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusResp) ProtoMessage() {}

func (x *SyncStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusResp.ProtoReflect.Descriptor instead.
func (*SyncStatusResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{3}
}

func (x *SyncStatusResp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

//SyncSGRules: subject of Security Group Rules to Sync
type SyncSGRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//security group rules items
	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncSGRules) Reset() {
	*x = SyncSGRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSGRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSGRules) ProtoMessage() {}

func (x *SyncSGRules) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSGRules.ProtoReflect.Descriptor instead.
func (*SyncSGRules) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{4}
}

func (x *SyncSGRules) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

//SyncSecurityGroups: subject of Security Groups to Sync
type SyncSecurityGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//security group items
	Groups []*SecGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *SyncSecurityGroups) Reset() {
	*x = SyncSecurityGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSecurityGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSecurityGroups) ProtoMessage() {}

func (x *SyncSecurityGroups) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSecurityGroups.ProtoReflect.Descriptor instead.
func (*SyncSecurityGroups) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{5}
}

func (x *SyncSecurityGroups) GetGroups() []*SecGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

//SyncNetworks: subject of Networks to Sync
type SyncNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//network items
	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *SyncNetworks) Reset() {
	*x = SyncNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNetworks) ProtoMessage() {}

func (x *SyncNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNetworks.ProtoReflect.Descriptor instead.
func (*SyncNetworks) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{6}
}

func (x *SyncNetworks) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

//ListNetworksReq: req to list Networks
type ListNetworksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//network names scope; if none then list all netrworks
	NeteworkNames []string `protobuf:"bytes,1,rep,name=netework_names,json=neteworkNames,proto3" json:"netework_names,omitempty"`
}

func (x *ListNetworksReq) Reset() {
	*x = ListNetworksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksReq) ProtoMessage() {}

func (x *ListNetworksReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksReq.ProtoReflect.Descriptor instead.
func (*ListNetworksReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListNetworksReq) GetNeteworkNames() []string {
	if x != nil {
		return x.NeteworkNames
	}
	return nil
}

//ListNetworksResp: Network list resp
type ListNetworksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//network items
	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *ListNetworksResp) Reset() {
	*x = ListNetworksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksResp) ProtoMessage() {}

func (x *ListNetworksResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksResp.ProtoReflect.Descriptor instead.
func (*ListNetworksResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{8}
}

func (x *ListNetworksResp) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

//ListSecurityGroupsReq: req to list Seocurity Groups
type ListSecurityGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//SG names scope; if none then list all SGs
	SgNames []string `protobuf:"bytes,1,rep,name=sg_names,json=sgNames,proto3" json:"sg_names,omitempty"`
}

func (x *ListSecurityGroupsReq) Reset() {
	*x = ListSecurityGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityGroupsReq) ProtoMessage() {}

func (x *ListSecurityGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityGroupsReq.ProtoReflect.Descriptor instead.
func (*ListSecurityGroupsReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{9}
}

func (x *ListSecurityGroupsReq) GetSgNames() []string {
	if x != nil {
		return x.SgNames
	}
	return nil
}

//ListSecurityGroupsResp: Security Groups list resp
type ListSecurityGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//security group items
	Groups []*SecGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListSecurityGroupsResp) Reset() {
	*x = ListSecurityGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityGroupsResp) ProtoMessage() {}

func (x *ListSecurityGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityGroupsResp.ProtoReflect.Descriptor instead.
func (*ListSecurityGroupsResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{10}
}

func (x *ListSecurityGroupsResp) GetGroups() []*SecGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

//SyncReq: request to apply changes in DB for one of subject [Networks|Sucurity Groups|Security Grpups Rules]
type SyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//sync operation to apply to
	SyncOp SyncReq_SyncOp `protobuf:"varint,1,opt,name=sync_op,json=syncOp,proto3,enum=hbf.v1.sgroups.SyncReq_SyncOp" json:"sync_op,omitempty"`
	//one of subject
	//
	// Types that are assignable to Subject:
	//	*SyncReq_SgRules
	//	*SyncReq_Groups
	//	*SyncReq_Networks
	Subject isSyncReq_Subject `protobuf_oneof:"subject"`
}

func (x *SyncReq) Reset() {
	*x = SyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncReq) ProtoMessage() {}

func (x *SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncReq.ProtoReflect.Descriptor instead.
func (*SyncReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{11}
}

func (x *SyncReq) GetSyncOp() SyncReq_SyncOp {
	if x != nil {
		return x.SyncOp
	}
	return SyncReq_FullSync
}

func (m *SyncReq) GetSubject() isSyncReq_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (x *SyncReq) GetSgRules() *SyncSGRules {
	if x, ok := x.GetSubject().(*SyncReq_SgRules); ok {
		return x.SgRules
	}
	return nil
}

func (x *SyncReq) GetGroups() *SyncSecurityGroups {
	if x, ok := x.GetSubject().(*SyncReq_Groups); ok {
		return x.Groups
	}
	return nil
}

func (x *SyncReq) GetNetworks() *SyncNetworks {
	if x, ok := x.GetSubject().(*SyncReq_Networks); ok {
		return x.Networks
	}
	return nil
}

type isSyncReq_Subject interface {
	isSyncReq_Subject()
}

type SyncReq_SgRules struct {
	//subject of Security Grpup(s) Rule(s)
	SgRules *SyncSGRules `protobuf:"bytes,2,opt,name=sg_rules,json=sgRules,proto3,oneof"`
}

type SyncReq_Groups struct {
	//subject of Security Grpup(s)
	Groups *SyncSecurityGroups `protobuf:"bytes,3,opt,name=groups,proto3,oneof"`
}

type SyncReq_Networks struct {
	//subject of Network(s)
	Networks *SyncNetworks `protobuf:"bytes,4,opt,name=networks,proto3,oneof"`
}

func (*SyncReq_SgRules) isSyncReq_Subject() {}

func (*SyncReq_Groups) isSyncReq_Subject() {}

func (*SyncReq_Networks) isSyncReq_Subject() {}

//GetSgSubnetsReq: req to get Networks related to Security Group
type GetSgSubnetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//security group name
	SgName string `protobuf:"bytes,1,opt,name=sg_name,json=sgName,proto3" json:"sg_name,omitempty"`
}

func (x *GetSgSubnetsReq) Reset() {
	*x = GetSgSubnetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSgSubnetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSgSubnetsReq) ProtoMessage() {}

func (x *GetSgSubnetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSgSubnetsReq.ProtoReflect.Descriptor instead.
func (*GetSgSubnetsReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetSgSubnetsReq) GetSgName() string {
	if x != nil {
		return x.SgName
	}
	return ""
}

//GetSgSubnetsResp: Networks related to Security Group resp
type GetSgSubnetsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//network items
	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *GetSgSubnetsResp) Reset() {
	*x = GetSgSubnetsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSgSubnetsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSgSubnetsResp) ProtoMessage() {}

func (x *GetSgSubnetsResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSgSubnetsResp.ProtoReflect.Descriptor instead.
func (*GetSgSubnetsResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetSgSubnetsResp) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

//GetRulesReq; req to get Rules scoped by SecGroup pair 'from' --> 'to'
type GetRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//name of security groups 'from'
	SgFrom string `protobuf:"bytes,1,opt,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	//name of security groups 'to'
	SgTo string `protobuf:"bytes,2,opt,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
}

func (x *GetRulesReq) Reset() {
	*x = GetRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRulesReq) ProtoMessage() {}

func (x *GetRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRulesReq.ProtoReflect.Descriptor instead.
func (*GetRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetRulesReq) GetSgFrom() string {
	if x != nil {
		return x.SgFrom
	}
	return ""
}

func (x *GetRulesReq) GetSgTo() string {
	if x != nil {
		return x.SgTo
	}
	return ""
}

//FindRulesReq: req to find all SecGroup(s) Rule(s) scoped by variety('from') --> variety('to') SG(s)
type FindRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//scope GS name 'from' items
	SgFrom []string `protobuf:"bytes,1,rep,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	//scope  GS name 'to' items
	SgTo []string `protobuf:"bytes,2,rep,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
}

func (x *FindRulesReq) Reset() {
	*x = FindRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRulesReq) ProtoMessage() {}

func (x *FindRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRulesReq.ProtoReflect.Descriptor instead.
func (*FindRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{15}
}

func (x *FindRulesReq) GetSgFrom() []string {
	if x != nil {
		return x.SgFrom
	}
	return nil
}

func (x *FindRulesReq) GetSgTo() []string {
	if x != nil {
		return x.SgTo
	}
	return nil
}

//RulesResp: Security Group(s) Rule(s) resp
type RulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//SG rule(s) items
	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RulesResp) Reset() {
	*x = RulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulesResp) ProtoMessage() {}

func (x *RulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulesResp.ProtoReflect.Descriptor instead.
func (*RulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{16}
}

func (x *RulesResp) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

//GetSecGroupForAddressReq: req to get Security Group by IP or CIDR
type GetSecGroupForAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//an IP or CIDR
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetSecGroupForAddressReq) Reset() {
	*x = GetSecGroupForAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecGroupForAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecGroupForAddressReq) ProtoMessage() {}

func (x *GetSecGroupForAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecGroupForAddressReq.ProtoReflect.Descriptor instead.
func (*GetSecGroupForAddressReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetSecGroupForAddressReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

//Ports: represents Security Group Rule access source-dest ports
type Rule_Ports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//source port "num" or port range "num1-num2"
	S string `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	//destination  port "num" or port range "num1-num2"
	D string `protobuf:"bytes,2,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *Rule_Ports) Reset() {
	*x = Rule_Ports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_Ports) ProtoMessage() {}

func (x *Rule_Ports) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_Ports.ProtoReflect.Descriptor instead.
func (*Rule_Ports) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Rule_Ports) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *Rule_Ports) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

var File_sgroups_api_proto protoreflect.FileDescriptor

var file_sgroups_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x70, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x49, 0x50, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x0c, 0x92, 0x41, 0x09,
	0x0a, 0x07, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x08, 0x53, 0x65, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x67, 0x54, 0x6f, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x49, 0x50, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x62, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x23, 0x0a, 0x05,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x64, 0x3a, 0x23, 0x92, 0x41, 0x20, 0x0a, 0x1e, 0xd2, 0x01, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0xd2, 0x01, 0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0xd2, 0x01, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4b, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x39, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x47, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x46,
	0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x43, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x38, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x32,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xb1,
	0x02, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x62,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x52, 0x06, 0x73, 0x79, 0x6e,
	0x63, 0x4f, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x47, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x2e, 0x0a, 0x06, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0f,
	0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x73, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x54, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x13, 0x0a, 0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x67, 0x54, 0x6f, 0x3a, 0x17, 0x92, 0x41, 0x14, 0x0a, 0x12, 0xd2, 0x01, 0x07, 0x73,
	0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0xd2, 0x01, 0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x22, 0x55,
	0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x67, 0x54, 0x6f, 0x3a, 0x17, 0x92, 0x41,
	0x14, 0x0a, 0x12, 0xd2, 0x01, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0xd2, 0x01, 0x05,
	0x73, 0x67, 0x5f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x45,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0xbc, 0x0a, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x04, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x17, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1b, 0x1a, 0x19, 0x53, 0x79, 0x6e, 0x63,
	0x3a, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x44, 0x42, 0x12, 0x92, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x68,
	0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x92, 0x41, 0x32, 0x1a, 0x30, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x44, 0x42, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x68, 0x62,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x68,
	0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x44,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x25, 0x1a,
	0x23, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x20, 0x73,
	0x68, 0x6f, 0x77, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x62,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x33, 0x1a, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x67, 0x2f, 0x7b, 0x73, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x92, 0x41, 0x2b, 0x1a, 0x29,
	0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x3a, 0x20, 0x67, 0x65,
	0x74, 0x73, 0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x47, 0x12, 0xac, 0x01, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x68,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x67, 0x2d, 0x66,
	0x72, 0x6f, 0x6d, 0x2f, 0x7b, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x7d, 0x2f, 0x74, 0x6f,
	0x2f, 0x7b, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x92, 0x41,
	0x37, 0x1a, 0x35, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x67, 0x65, 0x74,
	0x73, 0x20, 0x53, 0x47, 0x28, 0x73, 0x29, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x28, 0x73, 0x29, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x69, 0x72, 0x20, 0x53, 0x47, 0x20, 0x27, 0x66, 0x72, 0x6f,
	0x6d, 0x27, 0x2d, 0x3e, 0x27, 0x74, 0x6f, 0x27, 0x12, 0xa2, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x45, 0x1a, 0x43, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x53, 0x47, 0x28, 0x73, 0x29,
	0x20, 0x52, 0x75, 0x6c, 0x65, 0x28, 0x73, 0x29, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x20, 0x27, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x2d, 0x3e, 0x27, 0x74, 0x6f, 0x27, 0x12, 0xb2, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x55, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x7d, 0x2f, 0x73, 0x67, 0x92, 0x41, 0x3a, 0x1a, 0x38, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a,
	0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x79, 0x20, 0x49, 0x50, 0x20, 0x6f, 0x72, 0x20, 0x43, 0x49,
	0x44, 0x52, 0x1a, 0x20, 0x92, 0x41, 0x1d, 0x12, 0x1b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0xd2, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x2d, 0x42, 0x46, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3b,
	0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x92, 0x41, 0x9e, 0x01, 0x12, 0x75, 0x0a, 0x13, 0x48,
	0x6f, 0x73, 0x74, 0x20, 0x42, 0x61, 0x73, 0x65, 0x64, 0x20, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x22, 0x59, 0x0a, 0x01, 0x45, 0x12, 0x54, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x67, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x32, 0x30, 0x32, 0x30, 0x2f, 0x30, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x77, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x74, 0x6f, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x32, 0x03, 0x31,
	0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sgroups_api_proto_rawDescOnce sync.Once
	file_sgroups_api_proto_rawDescData = file_sgroups_api_proto_rawDesc
)

func file_sgroups_api_proto_rawDescGZIP() []byte {
	file_sgroups_api_proto_rawDescOnce.Do(func() {
		file_sgroups_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_sgroups_api_proto_rawDescData)
	})
	return file_sgroups_api_proto_rawDescData
}

var file_sgroups_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sgroups_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_sgroups_api_proto_goTypes = []interface{}{
	(SyncReq_SyncOp)(0),                  // 0: hbf.v1.sgroups.SyncReq.SyncOp
	(*Network)(nil),                      // 1: hbf.v1.sgroups.Network
	(*SecGroup)(nil),                     // 2: hbf.v1.sgroups.SecGroup
	(*Rule)(nil),                         // 3: hbf.v1.sgroups.Rule
	(*SyncStatusResp)(nil),               // 4: hbf.v1.sgroups.SyncStatusResp
	(*SyncSGRules)(nil),                  // 5: hbf.v1.sgroups.SyncSGRules
	(*SyncSecurityGroups)(nil),           // 6: hbf.v1.sgroups.SyncSecurityGroups
	(*SyncNetworks)(nil),                 // 7: hbf.v1.sgroups.SyncNetworks
	(*ListNetworksReq)(nil),              // 8: hbf.v1.sgroups.ListNetworksReq
	(*ListNetworksResp)(nil),             // 9: hbf.v1.sgroups.ListNetworksResp
	(*ListSecurityGroupsReq)(nil),        // 10: hbf.v1.sgroups.ListSecurityGroupsReq
	(*ListSecurityGroupsResp)(nil),       // 11: hbf.v1.sgroups.ListSecurityGroupsResp
	(*SyncReq)(nil),                      // 12: hbf.v1.sgroups.SyncReq
	(*GetSgSubnetsReq)(nil),              // 13: hbf.v1.sgroups.GetSgSubnetsReq
	(*GetSgSubnetsResp)(nil),             // 14: hbf.v1.sgroups.GetSgSubnetsResp
	(*GetRulesReq)(nil),                  // 15: hbf.v1.sgroups.GetRulesReq
	(*FindRulesReq)(nil),                 // 16: hbf.v1.sgroups.FindRulesReq
	(*RulesResp)(nil),                    // 17: hbf.v1.sgroups.RulesResp
	(*GetSecGroupForAddressReq)(nil),     // 18: hbf.v1.sgroups.GetSecGroupForAddressReq
	(*Rule_Ports)(nil),                   // 19: hbf.v1.sgroups.Rule.Ports
	(*common.Networks_NetIP)(nil),        // 20: common.Networks.NetIP
	(common.Networks_NetIP_Transport)(0), // 21: common.Networks.NetIP.Transport
	(*timestamppb.Timestamp)(nil),        // 22: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                // 23: google.protobuf.Empty
}
var file_sgroups_api_proto_depIdxs = []int32{
	20, // 0: hbf.v1.sgroups.Network.network:type_name -> common.Networks.NetIP
	21, // 1: hbf.v1.sgroups.Rule.transport:type_name -> common.Networks.NetIP.Transport
	19, // 2: hbf.v1.sgroups.Rule.ports:type_name -> hbf.v1.sgroups.Rule.Ports
	22, // 3: hbf.v1.sgroups.SyncStatusResp.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 4: hbf.v1.sgroups.SyncSGRules.rules:type_name -> hbf.v1.sgroups.Rule
	2,  // 5: hbf.v1.sgroups.SyncSecurityGroups.groups:type_name -> hbf.v1.sgroups.SecGroup
	1,  // 6: hbf.v1.sgroups.SyncNetworks.networks:type_name -> hbf.v1.sgroups.Network
	1,  // 7: hbf.v1.sgroups.ListNetworksResp.networks:type_name -> hbf.v1.sgroups.Network
	2,  // 8: hbf.v1.sgroups.ListSecurityGroupsResp.groups:type_name -> hbf.v1.sgroups.SecGroup
	0,  // 9: hbf.v1.sgroups.SyncReq.sync_op:type_name -> hbf.v1.sgroups.SyncReq.SyncOp
	5,  // 10: hbf.v1.sgroups.SyncReq.sg_rules:type_name -> hbf.v1.sgroups.SyncSGRules
	6,  // 11: hbf.v1.sgroups.SyncReq.groups:type_name -> hbf.v1.sgroups.SyncSecurityGroups
	7,  // 12: hbf.v1.sgroups.SyncReq.networks:type_name -> hbf.v1.sgroups.SyncNetworks
	1,  // 13: hbf.v1.sgroups.GetSgSubnetsResp.networks:type_name -> hbf.v1.sgroups.Network
	3,  // 14: hbf.v1.sgroups.RulesResp.rules:type_name -> hbf.v1.sgroups.Rule
	12, // 15: hbf.v1.sgroups.SecGroupService.Sync:input_type -> hbf.v1.sgroups.SyncReq
	23, // 16: hbf.v1.sgroups.SecGroupService.SyncStatus:input_type -> google.protobuf.Empty
	8,  // 17: hbf.v1.sgroups.SecGroupService.ListNetworks:input_type -> hbf.v1.sgroups.ListNetworksReq
	10, // 18: hbf.v1.sgroups.SecGroupService.ListSecurityGroups:input_type -> hbf.v1.sgroups.ListSecurityGroupsReq
	13, // 19: hbf.v1.sgroups.SecGroupService.GetSgSubnets:input_type -> hbf.v1.sgroups.GetSgSubnetsReq
	15, // 20: hbf.v1.sgroups.SecGroupService.GetRules:input_type -> hbf.v1.sgroups.GetRulesReq
	16, // 21: hbf.v1.sgroups.SecGroupService.FindRules:input_type -> hbf.v1.sgroups.FindRulesReq
	18, // 22: hbf.v1.sgroups.SecGroupService.GetSecGroupForAddress:input_type -> hbf.v1.sgroups.GetSecGroupForAddressReq
	23, // 23: hbf.v1.sgroups.SecGroupService.Sync:output_type -> google.protobuf.Empty
	4,  // 24: hbf.v1.sgroups.SecGroupService.SyncStatus:output_type -> hbf.v1.sgroups.SyncStatusResp
	9,  // 25: hbf.v1.sgroups.SecGroupService.ListNetworks:output_type -> hbf.v1.sgroups.ListNetworksResp
	11, // 26: hbf.v1.sgroups.SecGroupService.ListSecurityGroups:output_type -> hbf.v1.sgroups.ListSecurityGroupsResp
	14, // 27: hbf.v1.sgroups.SecGroupService.GetSgSubnets:output_type -> hbf.v1.sgroups.GetSgSubnetsResp
	17, // 28: hbf.v1.sgroups.SecGroupService.GetRules:output_type -> hbf.v1.sgroups.RulesResp
	17, // 29: hbf.v1.sgroups.SecGroupService.FindRules:output_type -> hbf.v1.sgroups.RulesResp
	2,  // 30: hbf.v1.sgroups.SecGroupService.GetSecGroupForAddress:output_type -> hbf.v1.sgroups.SecGroup
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_sgroups_api_proto_init() }
func file_sgroups_api_proto_init() {
	if File_sgroups_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sgroups_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSGRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSecurityGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecurityGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecurityGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSgSubnetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSgSubnetsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecGroupForAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_Ports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sgroups_api_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SyncReq_SgRules)(nil),
		(*SyncReq_Groups)(nil),
		(*SyncReq_Networks)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sgroups_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sgroups_api_proto_goTypes,
		DependencyIndexes: file_sgroups_api_proto_depIdxs,
		EnumInfos:         file_sgroups_api_proto_enumTypes,
		MessageInfos:      file_sgroups_api_proto_msgTypes,
	}.Build()
	File_sgroups_api_proto = out.File
	file_sgroups_api_proto_rawDesc = nil
	file_sgroups_api_proto_goTypes = nil
	file_sgroups_api_proto_depIdxs = nil
}
