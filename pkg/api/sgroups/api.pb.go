// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.4
// source: sgroups/api.proto

package sgroups

import (
	common "github.com/H-BF/protos/pkg/api/common"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//ip network
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Network *common.Networks_NetIP `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{0}
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetNetwork() *common.Networks_NetIP {
	if x != nil {
		return x.Network
	}
	return nil
}

//security group
type SecGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Networks []*Network `protobuf:"bytes,2,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *SecGroup) Reset() {
	*x = SecGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecGroup) ProtoMessage() {}

func (x *SecGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecGroup.ProtoReflect.Descriptor instead.
func (*SecGroup) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{1}
}

func (x *SecGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecGroup) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

//security group rule
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//security group at client
	SgFrom *SecGroup `protobuf:"bytes,1,opt,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	//security group at server
	SgTo *SecGroup `protobuf:"bytes,2,opt,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
	//IP net transport
	Transport common.Networks_NetIP_Transport `protobuf:"varint,3,opt,name=transport,proto3,enum=common.Networks_NetIP_Transport" json:"transport,omitempty"`
	//port range(s)
	PortRange []*common.Networks_NetIP_PortRange `protobuf:"bytes,4,rep,name=port_range,json=portRange,proto3" json:"port_range,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{2}
}

func (x *Rule) GetSgFrom() *SecGroup {
	if x != nil {
		return x.SgFrom
	}
	return nil
}

func (x *Rule) GetSgTo() *SecGroup {
	if x != nil {
		return x.SgTo
	}
	return nil
}

func (x *Rule) GetTransport() common.Networks_NetIP_Transport {
	if x != nil {
		return x.Transport
	}
	return common.Networks_NetIP_Transport(0)
}

func (x *Rule) GetPortRange() []*common.Networks_NetIP_PortRange {
	if x != nil {
		return x.PortRange
	}
	return nil
}

type SyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SyncReq) Reset() {
	*x = SyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncReq) ProtoMessage() {}

func (x *SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncReq.ProtoReflect.Descriptor instead.
func (*SyncReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{3}
}

func (x *SyncReq) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type GetSgSubnetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SgName string `protobuf:"bytes,1,opt,name=sg_name,json=sgName,proto3" json:"sg_name,omitempty"`
}

func (x *GetSgSubnetsReq) Reset() {
	*x = GetSgSubnetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSgSubnetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSgSubnetsReq) ProtoMessage() {}

func (x *GetSgSubnetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSgSubnetsReq.ProtoReflect.Descriptor instead.
func (*GetSgSubnetsReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetSgSubnetsReq) GetSgName() string {
	if x != nil {
		return x.SgName
	}
	return ""
}

type GetSgSubnetsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *GetSgSubnetsResp) Reset() {
	*x = GetSgSubnetsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSgSubnetsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSgSubnetsResp) ProtoMessage() {}

func (x *GetSgSubnetsResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSgSubnetsResp.ProtoReflect.Descriptor instead.
func (*GetSgSubnetsResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetSgSubnetsResp) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

type GetRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SgFrom string `protobuf:"bytes,1,opt,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	SgTo   string `protobuf:"bytes,2,opt,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
}

func (x *GetRulesReq) Reset() {
	*x = GetRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRulesReq) ProtoMessage() {}

func (x *GetRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRulesReq.ProtoReflect.Descriptor instead.
func (*GetRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetRulesReq) GetSgFrom() string {
	if x != nil {
		return x.SgFrom
	}
	return ""
}

func (x *GetRulesReq) GetSgTo() string {
	if x != nil {
		return x.SgTo
	}
	return ""
}

type FindRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SgFrom []string `protobuf:"bytes,1,rep,name=sg_from,json=sgFrom,proto3" json:"sg_from,omitempty"`
	SgTo   []string `protobuf:"bytes,2,rep,name=sg_to,json=sgTo,proto3" json:"sg_to,omitempty"`
}

func (x *FindRulesReq) Reset() {
	*x = FindRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRulesReq) ProtoMessage() {}

func (x *FindRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRulesReq.ProtoReflect.Descriptor instead.
func (*FindRulesReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{7}
}

func (x *FindRulesReq) GetSgFrom() []string {
	if x != nil {
		return x.SgFrom
	}
	return nil
}

func (x *FindRulesReq) GetSgTo() []string {
	if x != nil {
		return x.SgTo
	}
	return nil
}

type RulesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RulesResp) Reset() {
	*x = RulesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulesResp) ProtoMessage() {}

func (x *RulesResp) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulesResp.ProtoReflect.Descriptor instead.
func (*RulesResp) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{8}
}

func (x *RulesResp) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type GetSecGroupForAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//an IP or IP/subnet address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetSecGroupForAddressReq) Reset() {
	*x = GetSecGroupForAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgroups_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecGroupForAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecGroupForAddressReq) ProtoMessage() {}

func (x *GetSecGroupForAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_sgroups_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecGroupForAddressReq.ProtoReflect.Descriptor instead.
func (*GetSecGroupForAddressReq) Descriptor() ([]byte, []int) {
	return file_sgroups_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetSecGroupForAddressReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

var File_sgroups_api_proto protoreflect.FileDescriptor

var file_sgroups_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x70, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49,
	0x50, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x53, 0x0a, 0x08, 0x53, 0x65,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68,
	0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22,
	0xe9, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x62, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x62, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x73, 0x67, 0x54, 0x6f, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x49, 0x50, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x49, 0x50, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x2a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x3b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x13, 0x0a, 0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x67, 0x54, 0x6f, 0x22, 0x3c, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a,
	0x05, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x67,
	0x54, 0x6f, 0x22, 0x37, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x9b, 0x04, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x17, 0x2e,
	0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63,
	0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x67, 0x2f, 0x7b, 0x73, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x72, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x67, 0x2d, 0x66, 0x72, 0x6f,
	0x6d, 0x2f, 0x7b, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x7d, 0x2f, 0x74, 0x6f, 0x2f, 0x7b,
	0x73, 0x67, 0x5f, 0x74, 0x6f, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x09,
	0x46, 0x69, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x68, 0x62, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x2e, 0x68, 0x62, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x68, 0x62,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x73, 0x67, 0x42,
	0xd2, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48,
	0x2d, 0x42, 0x46, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3b, 0x73, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x92, 0x41, 0x9e, 0x01, 0x12, 0x75, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x41, 0x50, 0x49, 0x22, 0x59, 0x0a,
	0x01, 0x45, 0x12, 0x54, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x67, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x30,
	0x32, 0x30, 0x2f, 0x30, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x74, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sgroups_api_proto_rawDescOnce sync.Once
	file_sgroups_api_proto_rawDescData = file_sgroups_api_proto_rawDesc
)

func file_sgroups_api_proto_rawDescGZIP() []byte {
	file_sgroups_api_proto_rawDescOnce.Do(func() {
		file_sgroups_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_sgroups_api_proto_rawDescData)
	})
	return file_sgroups_api_proto_rawDescData
}

var file_sgroups_api_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sgroups_api_proto_goTypes = []interface{}{
	(*Network)(nil),                         // 0: hbf.v1.sgroups.Network
	(*SecGroup)(nil),                        // 1: hbf.v1.sgroups.SecGroup
	(*Rule)(nil),                            // 2: hbf.v1.sgroups.Rule
	(*SyncReq)(nil),                         // 3: hbf.v1.sgroups.SyncReq
	(*GetSgSubnetsReq)(nil),                 // 4: hbf.v1.sgroups.GetSgSubnetsReq
	(*GetSgSubnetsResp)(nil),                // 5: hbf.v1.sgroups.GetSgSubnetsResp
	(*GetRulesReq)(nil),                     // 6: hbf.v1.sgroups.GetRulesReq
	(*FindRulesReq)(nil),                    // 7: hbf.v1.sgroups.FindRulesReq
	(*RulesResp)(nil),                       // 8: hbf.v1.sgroups.RulesResp
	(*GetSecGroupForAddressReq)(nil),        // 9: hbf.v1.sgroups.GetSecGroupForAddressReq
	(*common.Networks_NetIP)(nil),           // 10: common.Networks.NetIP
	(common.Networks_NetIP_Transport)(0),    // 11: common.Networks.NetIP.Transport
	(*common.Networks_NetIP_PortRange)(nil), // 12: common.Networks.NetIP.PortRange
	(*emptypb.Empty)(nil),                   // 13: google.protobuf.Empty
}
var file_sgroups_api_proto_depIdxs = []int32{
	10, // 0: hbf.v1.sgroups.Network.network:type_name -> common.Networks.NetIP
	0,  // 1: hbf.v1.sgroups.SecGroup.networks:type_name -> hbf.v1.sgroups.Network
	1,  // 2: hbf.v1.sgroups.Rule.sg_from:type_name -> hbf.v1.sgroups.SecGroup
	1,  // 3: hbf.v1.sgroups.Rule.sg_to:type_name -> hbf.v1.sgroups.SecGroup
	11, // 4: hbf.v1.sgroups.Rule.transport:type_name -> common.Networks.NetIP.Transport
	12, // 5: hbf.v1.sgroups.Rule.port_range:type_name -> common.Networks.NetIP.PortRange
	2,  // 6: hbf.v1.sgroups.SyncReq.rules:type_name -> hbf.v1.sgroups.Rule
	0,  // 7: hbf.v1.sgroups.GetSgSubnetsResp.networks:type_name -> hbf.v1.sgroups.Network
	2,  // 8: hbf.v1.sgroups.RulesResp.rules:type_name -> hbf.v1.sgroups.Rule
	3,  // 9: hbf.v1.sgroups.SecGroupService.Sync:input_type -> hbf.v1.sgroups.SyncReq
	4,  // 10: hbf.v1.sgroups.SecGroupService.GetSgSubnets:input_type -> hbf.v1.sgroups.GetSgSubnetsReq
	6,  // 11: hbf.v1.sgroups.SecGroupService.GetRules:input_type -> hbf.v1.sgroups.GetRulesReq
	7,  // 12: hbf.v1.sgroups.SecGroupService.FindRules:input_type -> hbf.v1.sgroups.FindRulesReq
	9,  // 13: hbf.v1.sgroups.SecGroupService.GetSecGroupForAddress:input_type -> hbf.v1.sgroups.GetSecGroupForAddressReq
	13, // 14: hbf.v1.sgroups.SecGroupService.Sync:output_type -> google.protobuf.Empty
	5,  // 15: hbf.v1.sgroups.SecGroupService.GetSgSubnets:output_type -> hbf.v1.sgroups.GetSgSubnetsResp
	8,  // 16: hbf.v1.sgroups.SecGroupService.GetRules:output_type -> hbf.v1.sgroups.RulesResp
	8,  // 17: hbf.v1.sgroups.SecGroupService.FindRules:output_type -> hbf.v1.sgroups.RulesResp
	1,  // 18: hbf.v1.sgroups.SecGroupService.GetSecGroupForAddress:output_type -> hbf.v1.sgroups.SecGroup
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_sgroups_api_proto_init() }
func file_sgroups_api_proto_init() {
	if File_sgroups_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sgroups_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSgSubnetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSgSubnetsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RulesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgroups_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecGroupForAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sgroups_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sgroups_api_proto_goTypes,
		DependencyIndexes: file_sgroups_api_proto_depIdxs,
		MessageInfos:      file_sgroups_api_proto_msgTypes,
	}.Build()
	File_sgroups_api_proto = out.File
	file_sgroups_api_proto_rawDesc = nil
	file_sgroups_api_proto_goTypes = nil
	file_sgroups_api_proto_depIdxs = nil
}
